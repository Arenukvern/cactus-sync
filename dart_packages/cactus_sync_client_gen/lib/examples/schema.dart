import 'package:cactus_sync_client/cactus_sync_client.dart';
import 'package:riverpod/riverpod.dart';

/// !------------ CAUTION ------------!
/// Autogenerated file. Please do not edit it manually!
/// Updated: 2021-04-24 18:04:54.565
/// !---------- END CAUTION ----------!

        final useiDModelState = Provider<ID>((_)=>
    CactusStateModel<ID>()
  );

  export const IDModel = CactusSync.attachModel(
    CactusModel.init<
      ID,
      MutationCreateIDArgs,
      { createID: Maybe<ID> },
      MutationUpdateIDArgs,
      { updateID: Maybe<ID> },
      MutationDeleteIDArgs,
      { deleteID: Maybe<ID> },
      QueryGetIDArgs,
      { getID: Maybe<ID> },
      QueryFindIDsArgs,
      { findIDs: IDResultList}
    >(
      graphqlModelType:  as Maybe<GraphQLObjectType> 
      )
  )

  final usetodoModelState = Provider<Todo>((_)=>
    CactusStateModel<Todo>()
  );

  export const TodoModel = CactusSync.attachModel(
    CactusModel.init<
      Todo,
      MutationCreateTodoArgs,
      { createTodo: Maybe<Todo> },
      MutationUpdateTodoArgs,
      { updateTodo: Maybe<Todo> },
      MutationDeleteTodoArgs,
      { deleteTodo: Maybe<Todo> },
      QueryGetTodoArgs,
      { getTodo: Maybe<Todo> },
      QueryFindTodosArgs,
      { findTodos: TodoResultList}
    >(
      graphqlModelType:  as Maybe<GraphQLObjectType> 
      )
  )

  final useuserModelState = Provider<User>((_)=>
    CactusStateModel<User>()
  );

  export const UserModel = CactusSync.attachModel(
    CactusModel.init<
      User,
      MutationCreateUserArgs,
      { createUser: Maybe<User> },
      MutationUpdateUserArgs,
      { updateUser: Maybe<User> },
      MutationDeleteUserArgs,
      { deleteUser: Maybe<User> },
      QueryGetUserArgs,
      { getUser: Maybe<User> },
      QueryFindUsersArgs,
      { findUsers: UserResultList}
    >(
      graphqlModelType:  as Maybe<GraphQLObjectType> 
      )
  )

  final usecactusSyncTimestampModelState = Provider<CactusSyncTimestamp>((_)=>
    CactusStateModel<CactusSyncTimestamp>()
  );

  export const CactusSyncTimestampModel = CactusSync.attachModel(
    CactusModel.init<
      CactusSyncTimestamp,
      MutationCreateCactusSyncTimestampArgs,
      { createCactusSyncTimestamp: Maybe<CactusSyncTimestamp> },
      MutationUpdateCactusSyncTimestampArgs,
      { updateCactusSyncTimestamp: Maybe<CactusSyncTimestamp> },
      MutationDeleteCactusSyncTimestampArgs,
      { deleteCactusSyncTimestamp: Maybe<CactusSyncTimestamp> },
      QueryGetCactusSyncTimestampArgs,
      { getCactusSyncTimestamp: Maybe<CactusSyncTimestamp> },
      QueryFindCactusSyncTimestampsArgs,
      { findCactusSyncTimestamps: CactusSyncTimestampResultList}
    >(
      graphqlModelType:  as Maybe<GraphQLObjectType> 
      )
  )

  final usedatabaseChangeTypeModelState = Provider<DatabaseChangeType>((_)=>
    CactusStateModel<DatabaseChangeType>()
  );

  export const DatabaseChangeTypeModel = CactusSync.attachModel(
    CactusModel.init<
      DatabaseChangeType,
      MutationCreateDatabaseChangeTypeArgs,
      { createDatabaseChangeType: Maybe<DatabaseChangeType> },
      MutationUpdateDatabaseChangeTypeArgs,
      { updateDatabaseChangeType: Maybe<DatabaseChangeType> },
      MutationDeleteDatabaseChangeTypeArgs,
      { deleteDatabaseChangeType: Maybe<DatabaseChangeType> },
      QueryGetDatabaseChangeTypeArgs,
      { getDatabaseChangeType: Maybe<DatabaseChangeType> },
      QueryFindDatabaseChangeTypesArgs,
      { findDatabaseChangeTypes: DatabaseChangeTypeResultList}
    >(
      graphqlModelType:  as Maybe<GraphQLObjectType> 
      )
  )



