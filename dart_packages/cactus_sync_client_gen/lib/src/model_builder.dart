import 'dart:async';

import 'package:build/build.dart';
import 'package:cactus_sync_client_gen/src/gql_dart_formatter.dart';
import 'package:cactus_sync_client_gen/src/gql_enum.dart';
import 'package:cactus_sync_client_gen/src/gql_input_converter.dart';
import 'package:cactus_sync_client_gen/src/gql_model_builder.dart';
import 'package:code_builder/code_builder.dart';
import 'package:gql/language.dart' as gql_lang;
import "package:gql/schema.dart" as gql_schema;
import 'package:indent/indent.dart';

class ModelBuilder implements Builder {
  @override
  FutureOr<void> build(BuildStep buildStep) async {
    // Retrieve the currently matched asset
    final inputId = buildStep.inputId;
    final assetName = inputId.pathSegments.last.split('.').first;

    /// Create new target
    final copyAssetId = inputId.changeExtension('.dart');
    final originContentStr = await buildStep.readAsString(inputId);
    final schemaDocument = gql_lang.parseString(originContentStr);
    final schema = gql_schema.buildSchema(schemaDocument);
    // TODO: add operation types
    // TODO: add enums

    // TODO: add scalars
    final finalClasses = <Class>{};
    final operationTypes = schema.typeMap;
    final modelsAndProviders = GqlModelBuilder().makeModelsAndProviders(
      operationTypes: operationTypes.values,
    );

    finalClasses.addAll(modelsAndProviders.models);
    final inputClasses = GqlInputs().fromSchema(
      inputObjectTypes: schema.inputObjectTypes,
    );
    finalClasses.addAll(inputClasses);

    final finalBuffer = StringBuffer(
      """
        import 'package:cactus_sync_client/cactus_sync_client.dart';
        import 'package:riverpod/riverpod.dart';
        import 'package:built_value/built_value.dart';
        import 'package:json_annotation/json_annotation.dart';
        import 'sync_config.dart';
        
        part '$assetName.g.dart';

        /// !------------ CAUTION ------------!
        /// Autogenerated file. Please do not edit it manually!
        /// Updated: ${DateTime.now()}
        /// !---------- END CAUTION ----------!
      """
          .unindent(),
    );
    final dartEnums = GqlEnums.fromSchema(
      schemaEnums: schema.enums,
    );
    finalBuffer
      ..writeln(dartEnums)
      ..writeln(
        finalClasses
            .map(
              (dartClass) =>
                  GqlDartFormatter.stringifyAndFormat(dartClass: dartClass),
            )
            .join("\n"),
      )
      ..writeln(modelsAndProviders.providers);
    final finalContent = finalBuffer.toString();

    await buildStep.writeAsString(copyAssetId, finalContent.unindent());
  }

  @override
  Map<String, List<String>> get buildExtensions => {
        '.graphql': [".dart"]
      };
}
