## NOTE: This schema was generated by Graphback and should not be changed manually

"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy(
  """
  The URL that specifies the behaviour of this scalar.
  """
  url: String!
) on SCALAR

"""
@model
@cactusSync
This model keeps all changes for every model any made
FIXME: Maybe schema needs to work this way (first open, after offline):
client queried CactusSyncTimestamp first.
If new timestamps occured, then request changes
"""
type CactusSyncTimestamp {
  id: ID!

  """
  The id, which will be created, if
  the model was created offline
  """
  _clientId: ID
  timestamp: Int
  changeType: DatabaseChangeType!
  modelTypename: String
  modelId: ID!
}

input CactusSyncTimestampFilter {
  _id: IDInput
  _clientId: IDInput
  timestamp: IntInput
  changeType: StringInput
  modelTypename: StringInput
  modelId: IDInput
  and: [CactusSyncTimestampFilter!]
  or: [CactusSyncTimestampFilter!]
  not: CactusSyncTimestampFilter
}

type CactusSyncTimestampResultList {
  items: [CactusSyncTimestamp]!
  offset: Int
  limit: Int
  count: Int
}

input CactusSyncTimestampSubscriptionFilter {
  and: [CactusSyncTimestampSubscriptionFilter!]
  or: [CactusSyncTimestampSubscriptionFilter!]
  not: CactusSyncTimestampSubscriptionFilter
  _id: IDInput
  _clientId: IDInput
  timestamp: IntInput
  changeType: StringInput
  modelTypename: StringInput
  modelId: IDInput
}

input CreateCactusSyncTimestampInput {
  _clientId: ID
  timestamp: Int
  changeType: DatabaseChangeType!
  modelTypename: String
  modelId: ID!
}

input CreateTodoInput {
  _clientId: ID
  _version: Int!
  _lastUpdatedAt: Int!
  title: String
  userId: ID
}

input CreateUserInput {
  _clientId: ID
  _version: Int!
  _lastUpdatedAt: Int!
  name: String
}

"""
Named according to spec: https://graphql-rules.com/rules/naming-enum
"""
enum DatabaseChangeType {
  CREATE
  UPDATE
  DELETE
}

scalar ID

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
  between: [ID!]
}

input IntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
}

input MutateCactusSyncTimestampInput {
  id: ID!
  _clientId: ID
  timestamp: Int
  changeType: DatabaseChangeType
  modelTypename: String
  modelId: ID
}

input MutateTodoInput {
  id: ID!
  _clientId: ID
  _version: Int
  _lastUpdatedAt: Int
  title: String
  userId: ID
}

input MutateUserInput {
  id: ID!
  _clientId: ID
  _version: Int
  _lastUpdatedAt: Int
  name: String
}

type Mutation {
  createTodo(input: CreateTodoInput!): Todo
  updateTodo(input: MutateTodoInput!): Todo
  deleteTodo(input: MutateTodoInput!): Todo
  createUser(input: CreateUserInput!): User
  updateUser(input: MutateUserInput!): User
  deleteUser(input: MutateUserInput!): User
  createCactusSyncTimestamp(
    input: CreateCactusSyncTimestampInput!
  ): CactusSyncTimestamp
  updateCactusSyncTimestamp(
    input: MutateCactusSyncTimestampInput!
  ): CactusSyncTimestamp
  deleteCactusSyncTimestamp(
    input: MutateCactusSyncTimestampInput!
  ): CactusSyncTimestamp
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getTodo(id: ID!): Todo
  findTodos(
    filter: TodoFilter
    page: PageRequest
    orderBy: OrderByInput
  ): TodoResultList!
  getUser(id: ID!): User
  findUsers(
    filter: UserFilter
    page: PageRequest
    orderBy: OrderByInput
  ): UserResultList!
  getCactusSyncTimestamp(id: ID!): CactusSyncTimestamp
  findCactusSyncTimestamps(
    filter: CactusSyncTimestampFilter
    page: PageRequest
    orderBy: OrderByInput
  ): CactusSyncTimestampResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newTodo(filter: TodoSubscriptionFilter): Todo!
  updatedTodo(filter: TodoSubscriptionFilter): Todo!
  deletedTodo(filter: TodoSubscriptionFilter): Todo!
  newUser(filter: UserSubscriptionFilter): User!
  updatedUser(filter: UserSubscriptionFilter): User!
  deletedUser(filter: UserSubscriptionFilter): User!
  newCactusSyncTimestamp(
    filter: CactusSyncTimestampSubscriptionFilter
  ): CactusSyncTimestamp!
  updatedCactusSyncTimestamp(
    filter: CactusSyncTimestampSubscriptionFilter
  ): CactusSyncTimestamp!
  deletedCactusSyncTimestamp(
    filter: CactusSyncTimestampSubscriptionFilter
  ): CactusSyncTimestamp!
}

"""
@model
@cactusSync
TODO: make directive hasId
@hasId
"""
type Todo {
  id: ID!

  """
  The id, which will be created, if
  the model was created offline
  """
  _clientId: ID
  _version: Int!
  _lastUpdatedAt: Int!
  title: String

  """
  @manyToOne(field: 'todos', key: 'userId')
  @manyToOne(field: 'todos')
  """
  user: User
}

input TodoFilter {
  _id: IDInput
  _clientId: IDInput
  _version: IntInput
  _lastUpdatedAt: IntInput
  title: StringInput
  userId: IDInput
  and: [TodoFilter!]
  or: [TodoFilter!]
  not: TodoFilter
}

type TodoResultList {
  items: [Todo]!
  offset: Int
  limit: Int
  count: Int
}

input TodoSubscriptionFilter {
  and: [TodoSubscriptionFilter!]
  or: [TodoSubscriptionFilter!]
  not: TodoSubscriptionFilter
  _id: IDInput
  _clientId: IDInput
  _version: IntInput
  _lastUpdatedAt: IntInput
  title: StringInput
}

"""
@model
@cactusSync
"""
type User {
  id: ID!

  """
  The id, which will be created, if
  the model was created offline
  """
  _clientId: ID
  _version: Int!
  _lastUpdatedAt: Int!
  name: String

  """
  @oneToMany(field: 'user', key: 'userId')
  @oneToMany(field: 'user')
  """
  todos(filter: TodoFilter): [Todo]!
}

input UserFilter {
  _id: IDInput
  _clientId: IDInput
  _version: IntInput
  _lastUpdatedAt: IntInput
  name: StringInput
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

type UserResultList {
  items: [User]!
  offset: Int
  limit: Int
  count: Int
}

input UserSubscriptionFilter {
  and: [UserSubscriptionFilter!]
  or: [UserSubscriptionFilter!]
  not: UserSubscriptionFilter
  _id: IDInput
  _clientId: IDInput
  _version: IntInput
  _lastUpdatedAt: IntInput
  name: StringInput
}
