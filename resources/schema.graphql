scalar ID

"""
@model
@cactusSync
TODO: make directive hasId
@hasId
"""
type Todo {
  # TODO: replace type with ID
  id: ID!
  """
  The id, which will be created, if
  the model was created offline
  """
  _clientId: ID
  _version: Int!
  # TODO: replace type with Timestamp
  _lastUpdatedAt: Int!
  title: String
  """
  @manyToOne(field: 'todos')
  """
  user: User
}

"""
@model
@cactusSync
"""
type User {
  # TODO: replace type with ID
  id: ID!
  """
  The id, which will be created, if
  the model was created offline
  """
  _clientId: ID
  _version: Int!
  # TODO: replace type with Timestamp
  _lastUpdatedAt: Int!
  name: String
  """
  @oneToMany(field: 'user')
  """
  todos: [Todo]!
}

"""
@model
@cactusSync
This model keeps all changes for every model any made
FIXME: Maybe schema needs to work this way (first open, after offline):
client queried CactusSyncTimestamp first.
If new timestamps occured, then request changes
"""
type CactusSyncTimestamp {
  id: ID!
  """
  The id, which will be created, if
  the model was created offline
  """
  _clientId: ID
  # TODO: add Timestamp
  # TODO: must be indexed for fastest finds
  timestamp: Int
  changeType: DatabaseChangeType!
  # model __typename
  modelTypename: String
  modelId: ID!
}
"""
Named according to spec: https://graphql-rules.com/rules/naming-enum
"""
enum DatabaseChangeType {
  CREATE
  UPDATE
  DELETE
}
